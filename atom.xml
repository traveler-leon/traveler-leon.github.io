<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leon&#39;s Blogs</title>
  <icon>https://traveler-leon.github.io/icon.png</icon>
  <subtitle>切不可肆意挥霍时光</subtitle>
  <link href="https://traveler-leon.github.io/atom.xml" rel="self"/>
  
  <link href="https://traveler-leon.github.io/"/>
  <updated>2021-02-04T02:41:57.461Z</updated>
  <id>https://traveler-leon.github.io/</id>
  
  <author>
    <name>Leon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flask_配置文件解读</title>
    <link href="https://traveler-leon.github.io/2021/02/04/flask-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/"/>
    <id>https://traveler-leon.github.io/2021/02/04/flask-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/</id>
    <published>2021-02-04T02:14:01.000Z</published>
    <updated>2021-02-04T02:41:57.461Z</updated>
    
    
    <summary type="html">&lt;p&gt;在编程过程中，配置文件通常用来定义一些重要的变量。所以必须掌握。下面讲解一下在Flask中的三种用法。&lt;/p&gt;
&lt;h2 id=&quot;引用方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#引用方法&quot;&gt;&lt;/a&gt; 引用方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;第一种用法&lt;/strong&gt;&lt;br&gt;
在模块下创建一个文件，这个文件可以是任何名字和任何后缀，但是通常我们用config.cfg这个的命名和后缀来进行使用。&lt;br&gt;
&lt;img src=&quot;/images/Flask%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;在这样的情况下，Flask如果要引用配置文件里面的内容，需要通过以下方式：&lt;/p&gt;
 &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.config.from_pyfile(&lt;span class=&quot;string&quot;&gt;&amp;quot;config.cfg&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Flask框架" scheme="https://traveler-leon.github.io/categories/Flask%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="-Flask配置文件解读" scheme="https://traveler-leon.github.io/tags/Flask%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>什么是flask</title>
    <link href="https://traveler-leon.github.io/2021/02/03/%E4%BB%80%E4%B9%88%E6%98%AFflask/"/>
    <id>https://traveler-leon.github.io/2021/02/03/%E4%BB%80%E4%B9%88%E6%98%AFflask/</id>
    <published>2021-02-03T15:27:23.000Z</published>
    <updated>2021-02-03T16:20:32.766Z</updated>
    
    
    <summary type="html">&lt;p&gt;flask在架设网站的结构中，属于一个代码框架，用于处理一系列的逻辑事项，完成路由分发(及根据前端请求，找到对应的视图函数)，其他的工作如报文打包回传等，都有服务器进行完成。&lt;/p&gt;</summary>
    
    
    
    <category term="Flask框架" scheme="https://traveler-leon.github.io/categories/Flask%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="-什么是Flask" scheme="https://traveler-leon.github.io/tags/%E4%BB%80%E4%B9%88%E6%98%AFFlask/"/>
    
  </entry>
  
  <entry>
    <title>decision_tree(决策树)</title>
    <link href="https://traveler-leon.github.io/2020/12/31/decision-tree/"/>
    <id>https://traveler-leon.github.io/2020/12/31/decision-tree/</id>
    <published>2020-12-31T07:54:51.000Z</published>
    <updated>2021-02-03T15:58:57.318Z</updated>
    
    
    <summary type="html">&lt;p&gt;决策树算法是通过对训练数据集进行不断的分类，最终建立起来的决策树。&lt;br /&gt;
既然是建立一棵树，自然就下如何划分根节点和叶子节点，如何建立左子树和右子树等问题。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://traveler-leon.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="-机器学习 -决策树" scheme="https://traveler-leon.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>dbscan(密度聚类)</title>
    <link href="https://traveler-leon.github.io/2020/12/30/dbscan/"/>
    <id>https://traveler-leon.github.io/2020/12/30/dbscan/</id>
    <published>2020-12-30T03:36:26.000Z</published>
    <updated>2020-12-30T04:27:15.213Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是聚类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是聚类&quot;&gt;&lt;/a&gt; 什么是聚类&lt;/h2&gt;
&lt;p&gt;聚类是无监督学习的一个小分支，其本质就是将样本通过亲近程度对其进行分类，你可能会有疑问？分多少类别？亲近程度如何衡量？&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://traveler-leon.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="-机器学习 -聚类 -密度聚类 -DBSCAN" scheme="https://traveler-leon.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%81%9A%E7%B1%BB-%E5%AF%86%E5%BA%A6%E8%81%9A%E7%B1%BB-DBSCAN/"/>
    
  </entry>
  
  <entry>
    <title>k-means(K均值算法)</title>
    <link href="https://traveler-leon.github.io/2020/12/29/k-means/"/>
    <id>https://traveler-leon.github.io/2020/12/29/k-means/</id>
    <published>2020-12-29T13:52:25.000Z</published>
    <updated>2020-12-29T14:38:17.024Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是聚类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是聚类&quot;&gt;&lt;/a&gt; 什么是聚类&lt;/h2&gt;
&lt;p&gt;聚类是无监督学习的一个小分支，其本质就是将样本通过亲近程度对其进行分类，你可能会有疑问？分多少类别？亲近程度如何衡量？&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://traveler-leon.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="-机器学习 -聚类 -k均值算法 -k-means" scheme="https://traveler-leon.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%81%9A%E7%B1%BB-k%E5%9D%87%E5%80%BC%E7%AE%97%E6%B3%95-k-means/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统及评测标准</title>
    <link href="https://traveler-leon.github.io/2020/12/29/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%8F%8A%E8%AF%84%E6%B5%8B%E6%A0%87%E5%87%86/"/>
    <id>https://traveler-leon.github.io/2020/12/29/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E5%8F%8A%E8%AF%84%E6%B5%8B%E6%A0%87%E5%87%86/</id>
    <published>2020-12-29T01:31:22.000Z</published>
    <updated>2020-12-29T13:54:56.663Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇博文将对推荐系统以及评测标准做一个简单介绍&lt;/p&gt;</summary>
    
    
    
    <category term="推荐系统" scheme="https://traveler-leon.github.io/categories/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="推荐系统" scheme="https://traveler-leon.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>什么是神经网络</title>
    <link href="https://traveler-leon.github.io/2020/12/13/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://traveler-leon.github.io/2020/12/13/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2020-12-13T11:12:54.000Z</published>
    <updated>2020-12-29T13:58:10.507Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇博文仅对深度学习中的几个简单的名字做一个朴素的解释和理解&lt;/p&gt;
&lt;h2 id=&quot;生物神经网络的工作模式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#生物神经网络的工作模式&quot;&gt;&lt;/a&gt; 生物神经网络的工作模式&lt;/h2&gt;
&lt;p&gt;神经网络的发现可以说是将人工智能又拔高了一个度，现今很多了不起的成果都是在此之上完成的，那它是如何被发现的呢？既然 是“神经”，自然可以联想到人体里面的的神经，及生物神经。&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://traveler-leon.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="-深度学习 -神经网络 -Neural Network" scheme="https://traveler-leon.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>医学图像分类</title>
    <link href="https://traveler-leon.github.io/2020/12/07/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"/>
    <id>https://traveler-leon.github.io/2020/12/07/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/</id>
    <published>2020-12-07T11:12:54.000Z</published>
    <updated>2020-12-07T11:27:21.080Z</updated>
    
    
    <summary type="html">&lt;p&gt;在医学图像中会有很多的分类,不同种类有不同的特点和用途，下面做一个简单的概述和总结&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="https://traveler-leon.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="-医学图像分类 -CT -MRI -x-ray -uv" scheme="https://traveler-leon.github.io/tags/%E5%8C%BB%E5%AD%A6%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-CT-MRI-x-ray-uv/"/>
    
  </entry>
  
  <entry>
    <title>Render(3D世界的图片是如何被现实出来的)</title>
    <link href="https://traveler-leon.github.io/2020/12/04/render/"/>
    <id>https://traveler-leon.github.io/2020/12/04/render/</id>
    <published>2020-12-04T06:23:10.000Z</published>
    <updated>2020-12-07T11:17:17.626Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;渲染&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#渲染&quot;&gt;&lt;/a&gt; 渲染&lt;/h1&gt;
&lt;h2 id=&quot;出发点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#出发点&quot;&gt;&lt;/a&gt; 出发点&lt;/h2&gt;
&lt;p&gt;渲染属于计算机图形学的范畴，本身涉及到很多的坐标转换等计算，本次记录不做具体的数学推导，只做一个原理的记录，仅为了方面搞明白图像处理中的边界问题。&lt;/p&gt;</summary>
    
    
    
    <category term="图像处理" scheme="https://traveler-leon.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="-render -渲染 -计算机图形学" scheme="https://traveler-leon.github.io/tags/render-%E6%B8%B2%E6%9F%93-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>交叉熵的由来</title>
    <link href="https://traveler-leon.github.io/2020/12/02/%E4%BA%A4%E5%8F%89%E7%86%B5%E7%9A%84%E7%94%B1%E6%9D%A5/"/>
    <id>https://traveler-leon.github.io/2020/12/02/%E4%BA%A4%E5%8F%89%E7%86%B5%E7%9A%84%E7%94%B1%E6%9D%A5/</id>
    <published>2020-12-02T08:19:12.000Z</published>
    <updated>2020-12-02T11:26:02.180Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;克劳德艾尔伍德香农&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#克劳德艾尔伍德香农&quot;&gt;&lt;/a&gt; 克劳德·艾尔伍德·香农&lt;/h2&gt;
&lt;p&gt;网上有句话说，爱因斯坦发明了相对论，但却没能把我们带进相对论的时代；而香农开创了信息论，且把人类带入了信息的时代，不是说二者谁更厉害，而是香农的地位远比我们想的要高得多，如果有兴趣，推荐读一读《香农传》，可能了解那个时代的背景，自然会对那时候的论点有更深刻的认识。&lt;/p&gt;
&lt;p&gt;香农熵&lt;br&gt;
香农熵其实本意是信息熵，但是关于熵的概念最初不是应用在信息论中，而是物理化学中，下面先看看最初熵的概念&lt;/p&gt;
&lt;p&gt;物理熵(各自瞎起名)&lt;br&gt;
物理中的熵表示的是分子在空间中的位置不确定性，不确定性越高，熵越高，反之则越小，比如固体的不确定性低，液体次之，气体则很高，因为气体中的分子相对固体液体，显得更加活跃。&lt;/p&gt;
&lt;p&gt;信息熵&lt;br&gt;
信息熵中不是描述分子中的位置不确定行，而是和信息有密切关系，既然和信息相关，那我就以语言来进行举例说明，因为语言就是人类用来传递信息的，&lt;br&gt;
我理解的信息熵：信息熵基于具体场景下确定结果的信息总量。听着可能有点绕口，下面逐个解释&lt;br&gt;
如下图所示&lt;br&gt;
&lt;img src=&quot;/images/%E4%BA%A4%E5%8F%89%E7%86%B5/%E7%9B%92%E5%AD%90%E9%87%8C%E7%9A%84%E5%AD%97%E6%AF%8D.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
