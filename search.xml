<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/12/01/linair/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset = pd.read_csv(<span class="string">&#x27;./studentscores.csv&#x27;</span>)</span><br><span class="line">dataset.head(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Hours</th>
      <th>Scores</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2.5</td>
      <td>21</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5.1</td>
      <td>47</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.2</td>
      <td>27</td>
    </tr>
    <tr>
      <th>3</th>
      <td>8.5</td>
      <td>75</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3.5</td>
      <td>30</td>
    </tr>
  </tbody>
</table>
</div>



<h1 id="第三步：提取特征"><a href="#第三步：提取特征" class="headerlink" title="第三步：提取特征"></a>第三步：提取特征</h1><h2 id="提取特征：学习时间-提取标签：学习成绩"><a href="#提取特征：学习时间-提取标签：学习成绩" class="headerlink" title="提取特征：学习时间 提取标签：学习成绩"></a>提取特征：学习时间 提取标签：学习成绩</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feature_columns=[<span class="string">&#x27;Hours&#x27;</span>]</span><br><span class="line">label_column=[<span class="string">&#x27;Scores&#x27;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">features = dataset[feature_columns]</span><br><span class="line">label = dataset[label_column]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">features.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Hours</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2.5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5.1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3.2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>8.5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3.5</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Scores</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>21</td>
    </tr>
    <tr>
      <th>1</th>
      <td>47</td>
    </tr>
    <tr>
      <th>2</th>
      <td>27</td>
    </tr>
    <tr>
      <th>3</th>
      <td>75</td>
    </tr>
    <tr>
      <th>4</th>
      <td>30</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = features.values</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y = label.values</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X</span><br></pre></td></tr></table></figure>




<pre><code>array([[2.5],
       [5.1],
       [3.2],
       [8.5],
       [3.5],
       [1.5],
       [9.2],
       [5.5],
       [8.3],
       [2.7],
       [7.7],
       [5.9],
       [4.5],
       [3.3],
       [1.1],
       [8.9],
       [2.5],
       [1.9],
       [6.1],
       [7.4],
       [2.7],
       [4.8],
       [3.8],
       [6.9],
       [7.8]])</code></pre>
<h1 id="将数据集拆分为1-4的测试集-3-4的训练集"><a href="#将数据集拆分为1-4的测试集-3-4的训练集" class="headerlink" title="将数据集拆分为1/4的测试集 3/4的训练集"></a>将数据集拆分为1/4的测试集 3/4的训练集</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=<span class="number">1</span>/<span class="number">4</span>,random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h1 id="对训练集进行模型训练"><a href="#对训练集进行模型训练" class="headerlink" title="对训练集进行模型训练"></a>对训练集进行模型训练</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">regressor = LinearRegression()</span><br><span class="line">regressor = regressor.fit(X_train,Y_train)</span><br></pre></td></tr></table></figure>

<h1 id="对测试集进行预测"><a href="#对测试集进行预测" class="headerlink" title="对测试集进行预测"></a>对测试集进行预测</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Y_pred = regressor.predict(X_test)</span><br></pre></td></tr></table></figure>

<h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X_train,Y_train,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(X_train,regressor.predict(X_train),color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<p><img src="output_17_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.scatter(X_test,Y_test,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(X_test,regressor.predict(X_test),color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<p><img src="output_18_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>render</title>
    <url>/2020/12/04/render/</url>
    <content><![CDATA[<h1 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h1><p>渲染管线指的是在给定的3D场景中，根据一架给定的摄像机 的视角生成2D图像的一系列步骤。之所以是2D图像，是因为我们的屏幕是2D的，因此我们需要通过2D屏幕来呈现3D场景</p>
<p>视觉系统的特性：<br>1.平行线会汇集成一个点</p>
<p><img src="/images/%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/50%E5%8F%B7%E5%85%AC%E8%B7%AF.jpg"></p>
<p>2.物体的大小会随着距离增加而变小<br>3.物体会有重叠，人眼没有穿透功能，一栋大楼后面的小楼我们是看不见的<br>4.3d图像成像中，是由三角形作为最小单元呈现的，三角形的大小决定了模型精度。<br><img src="/images/%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/3d%E5%B0%8F%E7%90%83.png"><br><img src="/images/%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/%E6%94%BE%E5%A4%A7%E5%90%8E%E7%9A%84%E5%B0%8F%E7%90%83.png"></p>
]]></content>
  </entry>
  <entry>
    <title>交叉熵的由来</title>
    <url>/2020/12/02/%E4%BA%A4%E5%8F%89%E7%86%B5%E7%9A%84%E7%94%B1%E6%9D%A5/</url>
    <content><![CDATA[<h2 id="克劳德·艾尔伍德·香农"><a href="#克劳德·艾尔伍德·香农" class="headerlink" title="克劳德·艾尔伍德·香农"></a>克劳德·艾尔伍德·香农</h2><p>网上有句话说，爱因斯坦发明了相对论，但却没能把我们带进相对论的时代；而香农开创了信息论，且把人类带入了信息的时代，不是说二者谁更厉害，而是香农的地位远比我们想的要高得多，如果有兴趣，推荐读一读《香农传》，可能了解那个时代的背景，自然会对那时候的论点有更深刻的认识。</p>
<p>香农熵<br>香农熵其实本意是信息熵，但是关于熵的概念最初不是应用在信息论中，而是物理化学中，下面先看看最初熵的概念</p>
<p>物理熵(各自瞎起名)<br>物理中的熵表示的是分子在空间中的位置不确定性，不确定性越高，熵越高，反之则越小，比如固体的不确定性低，液体次之，气体则很高，因为气体中的分子相对固体液体，显得更加活跃。</p>
<p>信息熵<br>信息熵中不是描述分子中的位置不确定行，而是和信息有密切关系，既然和信息相关，那我就以语言来进行举例说明，因为语言就是人类用来传递信息的，<br>我理解的信息熵：信息熵基于具体场景下确定结果的信息总量。听着可能有点绕口，下面逐个解释<br>如下图所示<br><img src="/images/%E4%BA%A4%E5%8F%89%E7%86%B5/%E7%9B%92%E5%AD%90%E9%87%8C%E7%9A%84%E5%AD%97%E6%AF%8D.png"></p>
<p>现在做一个实验，在不同的盒子中，取出一个字母。<br>假设一种取出字母的具体结果：A,所以在这里A就是确定的结果<br>那具体的场景是什么，这里具体的场景就是三堆不同的字母结合，在第一堆里是一个具体的场景，第二堆是一个具体的场景等。<br>现在采取问答的方式，来确定信息总量，你可以想作是一个人看着场景里的字母，要问多少句话，才能猜到取出来的这个字母具体是什么，好比是猜谜语游戏。</p>
<p>对于第一堆(第一个具体场景)：<br>张三问：其实不用问就知道结果，因为张三是看着这个场景发问，他已经知道这里只有A,自然可以准确猜到取出的数字就是A，<br>所以张三不用向外界获取任何信息，所以信息熵是最小的</p>
<p>对于第二个堆（第二个具体场景）:<br>张三问：是B吗？抽签人回答不是<br>张三问：是C吗？抽签人回答不是<br>张三问：是D吗？抽签人回答不是<br>这时张三才能确定抽签人抽到的是A，所以需要香外界获取三条信息，这时可能会有人问，如果这个人一开口就问是不是A，抽签人回答是，那只需要一条信息就能确定答案，以及还有其他的发问的方式，我理解的是，这个具体场景里本来就有四种字母，所以张三第一次就问到是不是A的，也是一个概率问题，这就为信息熵和概率直接的关系打下了基础，下面会接着讲，这里只需要知道，相比于第一堆的场景，第二堆不确定性更大，至少是要问一个问题才能确定答案，所以信息熵比第一个场景大，第三堆我们也就不说了，只要知道他的信息熵比第一种大就行，这就是熵和信息的关联。</p>
<p>知道熵和信息的具体关联后，要如何将信息熵与数学结合起来？<br>信息熵和概率问题</p>
<p>看如图三个杯子里分别有四个小球<br><img src="/images/%E4%BA%A4%E5%8F%89%E7%86%B5/%E7%9B%92%E5%AD%90%E9%87%8C%E7%9A%84%E5%B0%8F%E7%90%831.png"></p>
<p>做一个实验，每次取出一个小球放回，取四次，四次取出的结果顺序和杯子里小球的顺序为一样的概率是多少？<br>根据之前的套路<br>具体的结果:取出顺序和杯子里小球的顺序一样<br>具体的场景：第一个杯子，第二个杯子，第三个杯子<br>对于第一个杯子(第一个具体场景)：<br>具体结果：红红红红<br>概率：</p>
<p>$p=x+y$</p>
]]></content>
  </entry>
</search>
